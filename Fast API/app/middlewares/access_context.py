from contextvars import ContextVar
from uuid import uuid4

import structlog
from fastapi import Request, Response
from starlette.middleware.base import BaseHTTPMiddleware, RequestResponseEndpoint
from uvicorn.protocols.utils import get_client_addr, get_path_with_query_string

from app.core.configs import settings
from app.core.log import logger

REQUEST_ID_CTX_KEY = "request_id"
CORRELATION_ID_CTX_KEY = "correlation_id"
REQUEST_ID_HEADER_NAME = "X-Request-ID"
CORRELATION_ID_HEADER_NAME = "X-Correlation-ID"

request_id_ctx_var: ContextVar[str] = ContextVar(REQUEST_ID_CTX_KEY)
correlation_id_ctx_var: ContextVar[str] = ContextVar(REQUEST_ID_CTX_KEY)


class AccessContextLogMiddleware(BaseHTTPMiddleware):

    async def dispatch(
        self, request: Request, call_next: RequestResponseEndpoint
    ) -> Response:
        """
        This method is responsible for adding request and correlation IDs to the request context, logging the incoming
        request and response, and passing the request to the next middleware in the stack.

        Parameters:
        - request (Request): The incoming HTTP request.
        - call_next (RequestResponseEndpoint): The next middleware in the stack.

        Returns:
        - Response: The HTTP response after processing the request.

        The request ID is generated as a UUID and added to the context as a ContextVar. The correlation ID is taken
        from the X-Correlation-ID header, or if not present, generated as a UUID.

        The request context is updated with the request ID and correlation ID, and the structlog context is bound to
        the contextvars. This allows the request ID and correlation ID to be included in any log messages generated by
        structlog.

        The request is passed to the next middleware in the stack, and the response is returned. When the response is
        returned, the correlation ID is added to the response headers, and the request ID is reset to the initial value.

        Finally, the contextvars are unbound and the request context is restored to its original state.

        """
        request_id = str(uuid4())
        correlation_id = request.headers.get(CORRELATION_ID_HEADER_NAME)
        if correlation_id is None:
            correlation_id = str(uuid4())
        contextvars_dict = {
            REQUEST_ID_CTX_KEY: request_id,
            CORRELATION_ID_CTX_KEY: correlation_id,
        }
        request_id_token = request_id_ctx_var.set(request_id)
        correlation_id_token = correlation_id_ctx_var.set(correlation_id)
        structlog.contextvars.bind_contextvars(**contextvars_dict)
        request.scope.update(contextvars_dict)
        status_code = 500
        try:
            response = await call_next(request)
            status_code = response.status_code
            response.headers[CORRELATION_ID_HEADER_NAME] = correlation_id
            response.headers[REQUEST_ID_HEADER_NAME] = request_id
            return response
        finally:
            logger.info(
                '%s - "%s %s HTTP/%s" %d',
                get_client_addr(request.scope),
                request.scope["method"],
                get_path_with_query_string(request.scope),
                request.scope["http_version"],
                status_code,
            )
            correlation_id_ctx_var.reset(correlation_id_token)
            request_id_ctx_var.reset(request_id_token)
            structlog.contextvars.unbind_contextvars(*contextvars_dict.keys())
