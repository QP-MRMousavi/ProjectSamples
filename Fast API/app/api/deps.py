from fastapi import Depends, Query, Request
from fastapi.security import (
    HTTPAuthorizationCredentials,
    HTTPBearer,
)
from tortoise.backends.base.client import BaseDBAsyncClient

from app import crud, models, schemas
from app.exceptions import errors


user_token_bearer = HTTPBearer(description="User token bearer")


async def get_db(request: Request) -> BaseDBAsyncClient:
    """
    Retrieves the database client from the application state.

    Args:
        request (Request): The FastAPI request object.

    Returns:
        BaseDBAsyncClient: The database client used to interact with the database.
    """
    return request.app.state.db


async def get_user_or_raise(user_token_id: str, db: BaseDBAsyncClient) -> models.user:
    """
    Retrieves a user from the database based on the provided user token ID.

    Args:
        user_token_id (str): The unique identifier of the user token.
        db (BaseDBAsyncClient): The database client used to interact with the database.

    Returns:
        models.user: The user object if found, otherwise raises an exception.

    Raises:
        errors.common.InvalidCredentials: If the user token ID is not found in the database.
    """
    user_id = await crud.user_token.get(user_token_id=user_token_id)
    if user_id is None:
        raise errors.common.InvalidCredentials()
    user = await crud.user.get(db, record_id=user_id)
    if user is None:
        raise errors.common.InvalidCredentials()
    return user


async def get_user_by_token(
    authorization: HTTPAuthorizationCredentials = Depends(user_token_bearer),
    db: BaseDBAsyncClient = Depends(get_db),
) -> models.user:
    """
    Retrieves a user from the database based on the provided user token.

    Args:
        authorization (HTTPAuthorizationCredentials): The HTTP Authorization credentials containing the user token.
        db (BaseDBAsyncClient): The database client used to interact with the database.

    Returns:
        models.user: The user object if found, otherwise raises an exception.

    Raises:
        errors.common.InvalidCredentials: If the user token is not found in the database.

    Dependencies:
        - user_token_bearer: HTTPBearer instance for user token authentication.
        - get_db: Function to retrieve the database client from the application state.
    """
    return await get_user_or_raise(authorization.credentials, db)


async def page_size_params(
    req: Request,
    page: int = Query(0, ge=0, description="Page number"),
    size: int = Query(50, gt=0, le=100, description="Page size"),
) -> schemas.PageParams:
    """
    Generates a PageParams object with the provided page and size parameters.
    Also generates the URLs for the next and previous pages.

    Args:
        req (Request): The FastAPI request object.
        page (int, optional): The current page number. Defaults to 0.
        size (int, optional): The number of items per page. Defaults to 50.

    Returns:
        schemas.PageParams: A PageParams object containing the offset, limit, next, and previous URLs.

    Raises:
        ValueError: If the page size is not within the range of 1 to 100.

    Notes:
        - The next_url is generated by including the 'page' query parameter with a value of (page + 1).
        - The previous_url is generated by including the 'page' query parameter with a value of (page - 1).
    """
    next_url = req.url.include_query_params(page=page + 1)
    previous_url = req.url.include_query_params(page=page - 1)
    return schemas.PageParams(
        offset=page * size,
        limit=size,
        next=str(next_url),  # type: ignore
        previous=str(previous_url),  # type: ignore
    )
